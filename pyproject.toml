[build-system]
requires = ["setuptools >= 61.2", "versioningit ~= 2.0.1"]
build-backend = 'setuptools.build_meta'

[project]
name = "photonicdrivers"
maintainers = [
    { name = "Rasmus Bjerregaard Christensen", email = "rbcmail@gmail.com" },
]
description = "QCoDeS drivers for photonic equipment"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]
license = { text = "MIT" }
requires-python = ">=3.9"
dependencies = ["numpy", "qcodes", "versioningit~=2.0.1", "pythonnet", "pyvisa", "toptica-lasersdk", "future", "wraps"]

dynamic = ["version"]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]


[project.optional-dependencies]
test = [
    "coverage[toml]>=6.0.0",
    "deepdiff>=5.0.2",
    "hypothesis>=5.49.0",
    "lxml>=4.6.0",
    "lxml-stubs>=0.4.0",
    "mypy>=0.971",
    "pandas-stubs>=1.2.0.1",
    "pytest>=6.2.0",
    "pytest-asyncio>=0.19.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.0.0",
    "pytest-rerunfailures>=10.0",
    "pytest-xdist>=2.0.0",
    "sphinx>=4.5.0",              # sphinx extension tests
    "types-jsonschema>=4.16.0",
    "types_requests>=0.1.8",
    "types-setuptools>=57.0.0",
    "types-tabulate>=0.1.0",
    "types-tqdm>=4.64.6",
    "types_pywin32>=305.0.0.7",
]
docs = [
    "autodocsumm>=0.2.9",
    "nbsphinx>=0.8.9",
    "PyVisa-sim>=0.4.0",
    "sphinx>=6.2.0",
    "sphinx-favicon>=1.0",
    "sphinx-issues>=3.0.1",
    "sphinx-jsonschema>=1.19.1",
    "sphinx-rtd-theme>=1.0.0",
    "scipy>=1.7.0",
    "ipykernel",                 # examples using scipy
]

ci = ["photonicdrivers[test, docs]"]


[project.scripts]


[tool.coverage.run]
omit = [
    "photonicdrivers/__init__.py",
    "*/__init__.py",
    "photonicdrivers/tests/*",
    "photonicdrivers/instrument_drivers/test.py",
]
[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]

[tool.darker]
isort = true

[tool.isort]
profile = "black"

[tool.mypy]
strict_optional = true
show_column_numbers = true
plugins = "numpy.typing.mypy_plugin"
show_error_codes = true
enable_error_code = "ignore-without-code"
# strict confic. Eventually we would like to
# turn all of these on. These are all setings
# turned on by strict as of mypy 0.971
warn_unused_configs = true
# waiting for variadic generics so we
# can type numpy array constructors
disallow_any_generics = false
# we subclass non typed classes (from ipython / wrapt)
disallow_subclassing_any = false
# we are calling into untyped code from 3th parties
disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
# triggers warnings in untyped code
check_untyped_defs = false
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
# this triggers failures due to returning
# values from untyped 3th party libs
warn_return_any = false
no_implicit_reexport = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = ["photonicdrivers.tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# these are packages that we import
# but either don't have stubs or we
# dont have them installed.
[[tool.mypy.overrides]]
module = [
    "clr",
    "deepdiff",
    "gclib",
    "ipywidgets",
    "h5netcdf",
    "matplotlib.*",
    "mcl_RF_Switch_Controller64",
    "mcl_RF_Switch_Controller_NET45",
    "opencensus.ext.azure.*",
    "pywinusb.*",
    "pyqtgraph.*",                    # can be droped once deprecated plots module is deleted
    "ruamel",
    "spyder.utils.site",
    "spyder_kernels.customize",
    "System.IO",
    "uncertainties",
    "wrapt",
    "versioningit",
]
ignore_missing_imports = true

[tool.pyright]
include = ["photonicdrivers"]
ignore = []
reportMissingTypeStubs = true

[tool.pytest.ini_options]
minversion = "6.0"
junit_family = "legacy"

addopts = "-n auto --dist=loadfile"

markers = "serial"

# warnings triggered by xarray and hdf5netcdf using deprecated apis
filterwarnings = [
    "ignore:The distutils package is deprecated and slated for removal in Python 3.12:DeprecationWarning",
    "ignore:distutils Version classes are deprecated:DeprecationWarning",
    "ignore:SelectableGroups dict interface is deprecated:DeprecationWarning",
]

[tool.ruff]
# Enable Pyflakes `E` and `F` codes by default.
select = ["E", "F", "PT025"]
# darker will fix this as code is
# reformatted when it is changed.
ignore = ["E501"]

[tool.ruff.per-file-ignores]
# deprecated modules left
# for backwards compatibility


[tool.versioningit]
default-version = "0.0"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}+{branch}.{vcs}{rev}"
dirty = "{next_version}.dev{distance}+{branch}.{vcs}{rev}.dirty"
distance-dirty = "{next_version}.dev{distance}+{branch}.{vcs}{rev}.dirty"

[tool.versioningit.vcs]
method = "git"
match = ["v*"]

[tool.versioningit.onbuild]
source-file = "photonicdrivers/_version.py"
build-file = "photonicdrivers/_version.py"
